1) How did viewing a diff between two versions of a file help you spot the bug?

Because if old version can run correctly, while old can't, there must be some mistakes in the new one. The only place where error can occur is in the diff between new and old, so extract diff between new and old can help scale down the size to 
find bugs

2) How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Because it's common to have bug, the process to find diff will take many time in programming. And one may want to undo the change he made. In either of the case, access to the whole history is useful

3) What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros: It's more flexible to decide when to save by oneself, and the save can reflex logical change
Cons: It can avoid forgetting saving

4) Why do you think some version systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file seperately?

The orientation of each system is different, and the way of saving is different, too.

5) How can you use the commands git log and git diff to view the history of files?

First use the git log to see the changes made, then git diff can compare two adjacent commit 

6) How might using version control make you more confident to make changes that could break something?

Because with version-control, no matter what bug occur, we know we can go back through commit history and spot on which file first introduce bug

7) Now that you have your workspace set up, what do you want to try using Git for?

I want to tidy up my written program, and may change or reorganize them, now that I have tool for version-control